// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"MicroTikTok/user/model/dao/model"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserVideoFavorite(db *gorm.DB, opts ...gen.DOOption) userVideoFavorite {
	_userVideoFavorite := userVideoFavorite{}

	_userVideoFavorite.userVideoFavoriteDo.UseDB(db, opts...)
	_userVideoFavorite.userVideoFavoriteDo.UseModel(&model.UserVideoFavorite{})

	tableName := _userVideoFavorite.userVideoFavoriteDo.TableName()
	_userVideoFavorite.ALL = field.NewAsterisk(tableName)
	_userVideoFavorite.LikerID = field.NewInt32(tableName, "Liker_id")
	_userVideoFavorite.LikedID = field.NewInt32(tableName, "Liked_id")

	_userVideoFavorite.fillFieldMap()

	return _userVideoFavorite
}

type userVideoFavorite struct {
	userVideoFavoriteDo userVideoFavoriteDo

	ALL     field.Asterisk
	LikerID field.Int32
	LikedID field.Int32

	fieldMap map[string]field.Expr
}

func (u userVideoFavorite) Table(newTableName string) *userVideoFavorite {
	u.userVideoFavoriteDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userVideoFavorite) As(alias string) *userVideoFavorite {
	u.userVideoFavoriteDo.DO = *(u.userVideoFavoriteDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userVideoFavorite) updateTableName(table string) *userVideoFavorite {
	u.ALL = field.NewAsterisk(table)
	u.LikerID = field.NewInt32(table, "Liker_id")
	u.LikedID = field.NewInt32(table, "Liked_id")

	u.fillFieldMap()

	return u
}

func (u *userVideoFavorite) WithContext(ctx context.Context) *userVideoFavoriteDo {
	return u.userVideoFavoriteDo.WithContext(ctx)
}

func (u userVideoFavorite) TableName() string { return u.userVideoFavoriteDo.TableName() }

func (u userVideoFavorite) Alias() string { return u.userVideoFavoriteDo.Alias() }

func (u userVideoFavorite) Columns(cols ...field.Expr) gen.Columns {
	return u.userVideoFavoriteDo.Columns(cols...)
}

func (u *userVideoFavorite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userVideoFavorite) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 2)
	u.fieldMap["Liker_id"] = u.LikerID
	u.fieldMap["Liked_id"] = u.LikedID
}

func (u userVideoFavorite) clone(db *gorm.DB) userVideoFavorite {
	u.userVideoFavoriteDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userVideoFavorite) replaceDB(db *gorm.DB) userVideoFavorite {
	u.userVideoFavoriteDo.ReplaceDB(db)
	return u
}

type userVideoFavoriteDo struct{ gen.DO }

func (u userVideoFavoriteDo) Debug() *userVideoFavoriteDo {
	return u.withDO(u.DO.Debug())
}

func (u userVideoFavoriteDo) WithContext(ctx context.Context) *userVideoFavoriteDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userVideoFavoriteDo) ReadDB() *userVideoFavoriteDo {
	return u.Clauses(dbresolver.Read)
}

func (u userVideoFavoriteDo) WriteDB() *userVideoFavoriteDo {
	return u.Clauses(dbresolver.Write)
}

func (u userVideoFavoriteDo) Session(config *gorm.Session) *userVideoFavoriteDo {
	return u.withDO(u.DO.Session(config))
}

func (u userVideoFavoriteDo) Clauses(conds ...clause.Expression) *userVideoFavoriteDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userVideoFavoriteDo) Returning(value interface{}, columns ...string) *userVideoFavoriteDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userVideoFavoriteDo) Not(conds ...gen.Condition) *userVideoFavoriteDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userVideoFavoriteDo) Or(conds ...gen.Condition) *userVideoFavoriteDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userVideoFavoriteDo) Select(conds ...field.Expr) *userVideoFavoriteDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userVideoFavoriteDo) Where(conds ...gen.Condition) *userVideoFavoriteDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userVideoFavoriteDo) Order(conds ...field.Expr) *userVideoFavoriteDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userVideoFavoriteDo) Distinct(cols ...field.Expr) *userVideoFavoriteDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userVideoFavoriteDo) Omit(cols ...field.Expr) *userVideoFavoriteDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userVideoFavoriteDo) Join(table schema.Tabler, on ...field.Expr) *userVideoFavoriteDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userVideoFavoriteDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userVideoFavoriteDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userVideoFavoriteDo) RightJoin(table schema.Tabler, on ...field.Expr) *userVideoFavoriteDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userVideoFavoriteDo) Group(cols ...field.Expr) *userVideoFavoriteDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userVideoFavoriteDo) Having(conds ...gen.Condition) *userVideoFavoriteDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userVideoFavoriteDo) Limit(limit int) *userVideoFavoriteDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userVideoFavoriteDo) Offset(offset int) *userVideoFavoriteDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userVideoFavoriteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userVideoFavoriteDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userVideoFavoriteDo) Unscoped() *userVideoFavoriteDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userVideoFavoriteDo) Create(values ...*model.UserVideoFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userVideoFavoriteDo) CreateInBatches(values []*model.UserVideoFavorite, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userVideoFavoriteDo) Save(values ...*model.UserVideoFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userVideoFavoriteDo) First() (*model.UserVideoFavorite, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVideoFavorite), nil
	}
}

func (u userVideoFavoriteDo) Take() (*model.UserVideoFavorite, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVideoFavorite), nil
	}
}

func (u userVideoFavoriteDo) Last() (*model.UserVideoFavorite, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVideoFavorite), nil
	}
}

func (u userVideoFavoriteDo) Find() ([]*model.UserVideoFavorite, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserVideoFavorite), err
}

func (u userVideoFavoriteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserVideoFavorite, err error) {
	buf := make([]*model.UserVideoFavorite, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userVideoFavoriteDo) FindInBatches(result *[]*model.UserVideoFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userVideoFavoriteDo) Attrs(attrs ...field.AssignExpr) *userVideoFavoriteDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userVideoFavoriteDo) Assign(attrs ...field.AssignExpr) *userVideoFavoriteDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userVideoFavoriteDo) Joins(fields ...field.RelationField) *userVideoFavoriteDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userVideoFavoriteDo) Preload(fields ...field.RelationField) *userVideoFavoriteDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userVideoFavoriteDo) FirstOrInit() (*model.UserVideoFavorite, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVideoFavorite), nil
	}
}

func (u userVideoFavoriteDo) FirstOrCreate() (*model.UserVideoFavorite, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVideoFavorite), nil
	}
}

func (u userVideoFavoriteDo) FindByPage(offset int, limit int) (result []*model.UserVideoFavorite, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userVideoFavoriteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userVideoFavoriteDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userVideoFavoriteDo) Delete(models ...*model.UserVideoFavorite) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userVideoFavoriteDo) withDO(do gen.Dao) *userVideoFavoriteDo {
	u.DO = *do.(*gen.DO)
	return u
}
