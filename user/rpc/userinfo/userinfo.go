// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userinfo

import (
	"context"

	"MicroTikTok/user/rpc/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginRequest     = user.LoginRequest
	LoginResponse    = user.LoginResponse
	RegisterRequest  = user.RegisterRequest
	RegisterResponse = user.RegisterResponse
	User             = user.User
	UserInfoRequest  = user.UserInfoRequest
	UserInfoResponse = user.UserInfoResponse

	UserInfo interface {
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	}

	defaultUserInfo struct {
		cli zrpc.Client
	}
)

func NewUserInfo(cli zrpc.Client) UserInfo {
	return &defaultUserInfo{
		cli: cli,
	}
}

func (m *defaultUserInfo) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserInfoClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserInfo) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserInfoClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserInfo) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user.NewUserInfoClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}
