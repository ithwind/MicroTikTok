// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package feed

import (
	"context"

	"MicroTikTok/feed/rpc/pb/video"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FeedRequest           = video.FeedRequest
	FeedResponse          = video.FeedResponse
	PublishActionRequest  = video.PublishActionRequest
	PublishActionResponse = video.PublishActionResponse
	PublishListRequest    = video.PublishListRequest
	PublishListResponse   = video.PublishListResponse
	User                  = video.User
	Video                 = video.Video

	Feed interface {
		Feed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error)
		Upload(ctx context.Context, in *PublishActionRequest, opts ...grpc.CallOption) (*PublishActionResponse, error)
		GetPublishList(ctx context.Context, in *PublishListRequest, opts ...grpc.CallOption) (*PublishListResponse, error)
	}

	defaultFeed struct {
		cli zrpc.Client
	}
)

func NewFeed(cli zrpc.Client) Feed {
	return &defaultFeed{
		cli: cli,
	}
}

func (m *defaultFeed) Feed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error) {
	client := video.NewFeedClient(m.cli.Conn())
	return client.Feed(ctx, in, opts...)
}

func (m *defaultFeed) Upload(ctx context.Context, in *PublishActionRequest, opts ...grpc.CallOption) (*PublishActionResponse, error) {
	client := video.NewFeedClient(m.cli.Conn())
	return client.Upload(ctx, in, opts...)
}

func (m *defaultFeed) GetPublishList(ctx context.Context, in *PublishListRequest, opts ...grpc.CallOption) (*PublishListResponse, error) {
	client := video.NewFeedClient(m.cli.Conn())
	return client.GetPublishList(ctx, in, opts...)
}
